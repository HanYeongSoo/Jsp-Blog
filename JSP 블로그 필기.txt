데이프로그래밍 블로그 만들기

1. DB연결하는 방법
	- WEB-INF에 web.xml추가
	- META-INF에 context.xml추가
	- 아파치톰캣 홈페이지가서 9.0 클릭
		- <Context>
	 	<Resource name="jdbc/TestDB" auth="Container" type="javax.sql.DataSource"
               	maxTotal="100" maxIdle="30" maxWaitMillis="10000"
               	username="bloguser" password="bitc5600" driverClassName="com.mysql.cj.jdbc.Driver"
               	url="jdbc:mysql://localhost:3306/blog?serverTimezone=Asia/Seoul"/>
		</Context> 추가
	
		- <description>MySQL Test App</description>
		<resource-ref>
		<description>DB Connection</description>
		<res-ref-name>jdbc/TestDB</res-ref-name>
		<res-type>javax.sql.DataSource</res-type>
		<res-auth>Container</res-auth>
		</resource-ref> 추가


	- config 패키지에 DBConnection 추가 ( DataSource ds = (DataSource)envContext.lookup("jdbc/TestDB");	// 이 부분을 context.xml의 리소스네임으로 변경

	




==================================================================================
8강(로그인 화면 구현) 필기 노트

1. 메인화면 먼저 구현하기
	- list.jsp 생성
	- 부트스트랩 이용해서 뼈대 잡아주기 (<%@ include file="../layout/header.jsp" %>)
	- joinForm.jsp에서 회원가입 틀 만들었음
==================================================================================
9강 (회원가입 완료) 필기노트

1. 

==================================================================================
10강 주소 api 사용

1. https://www.juso.go.kr/addrlink/addrLinkUrl.do?confmKey=U01TX0FVVEgyMDIxMTEyMzExNDMzNzExMTkyODI=&returnUrl=http://localhost:8181/user&resultType=4

2. sample.jsp로 테스트를 먼저 해야함..
	- 테스트 할 때 받은 키 입력하고 주소 잘 보고! (var pop = window.open();에 있는 주소 잘 설정해야 함
	- function init 에 있는 승인키 입력도 잘 해야 함
	- 테스트가 다 됐는지 무조건 확인!!

3. 받아 올 창이 많은데 필요한 창만 남기고 지운다.

4. var변수를 이용해서 값을 받아서 입력 할 주소창을 설정하고 그 변수명.value = roadFullAddr;로 하면 주소창에 입력이 싹 된다. 

==================================================================================
12. 유저네임 중복 검사

1. 하이퍼링크로 하면 응답을 못받으니까 ajax를 사용

2. 만약에 <div id="a" value="ddd"><p>안녕</p></div> 에서
- document.querySelector("#a")
- $("#a").text(); === 안녕
- $("#a").html() === <p>안녕</p>
- $("#a").val() === ddd

3. onsubmit 은 form에서 submit이 될 떄 무조건 실행됨
	- onsubmit = "return 함수()"로 해야 submit으로 안넘어감
	- onsubmit에 걸린 함수에 boolean으로 true나 false를 설정해주면 false일 땐 submit이 제출이 안되고 true일때만 제출이 됨
	- 이걸 활용하면 회원가입 시 아이디 중복체크를 안했다거나 뭔가 빈 값이 있으면 제출이 안되겠지??

4. 


==================================================================================
16 + 17 강

1. 게시글 구현 할 시 textarea에 썸머노트 구현해서 사용하기 (썸머노트 라이브러리 개인톡에 링크있음)

2. 어떤 사람이 로그인 했는지 알아야 하기 때문에 userId도 필요함 
(대신 게시글Form에서 안보여주기 위해 hidden으로 처리했음)
(userId값을 받아와서 처리해도 상관은 없음!!)

==================================================================================
18강

1. 사용자 세션체크 필터 관련
- web.xml에 필터추가 (.jsp요청이 들어오면 필터처리를 위해)
- filter name과 class를 추가 후 filter-mapping을 해줌
- 여기선 ForbiddenUrlConfig.class에 코드 추가했음 (한 번씩 볼것)
- request.sendRedirect로 했던 .jsp요청을 RequestDispatcher로 처리해줄것

==================================================================================
19강(글 목록 보기)
1. 데이터베이스에 저장된 모든 값을 불러와야 한다는 것을 생각해야함
2. 그래서 service로 연결 할 list를 생성
3. service에서는 그 리스트를 dao로 고대로 연결
4. dao에서는 select문을 이용하여 우선 모든 값을 select from하고 id를 desc를 통해 최신순 정렬
5. while(rs.next())함수를 이용해 모든 값을 불러온 후 그 값을 list에 저장
(여기선 builder().id(rs.getInt("id").title.....이런식으로 저장 후 그 저장한 값을 list에 다시 .add했음)
6. 저장되어 반환된 list값을 컨트롤러에서 request.setattrbute를 통해 .jsp로 전송
7. 값을 뿌리는 곳에 jstl forEach를 통해 뿌려줌 (주소 매칭 확인!!)

==================================================================================
20강 세션과 쿠키
1. 다이어리에 필기했음

==================================================================================
21강 글목록 보기 페이징 (2/2)

 * EL표현식에서 기억해야 할 것 (${ }안에 쓰면 되는 것)
	1. sessionScope
	2. requestScope
	3. param
	4. cookie
	5. pageScope

1. SQL문 수정을 통해 한 페이지당 게시글을 4개씩 보여주도록 한다. 
	(SELECT * FROM board ORDER BY id DESC LIMIT ?, 4)
2. 0페이지 부터 시작한다는 가정으로 컨트롤로에 int page를 추가한다.
3. service와 Dao에도 추가해준다.
4. -1페이지는 없기 때문에 막아줘야하고 마찬가지로 게시글 총 갯수를 넘어가면 다음페이지를 비활성화 해줘야 하는데 이건 모르겠다.

==================================================================================
22강 위에서 못했던 4번 페이징 비활성화 및 페이지 12345...넘기는 거

1. 총 게시글은 db에서 count를 써서 가져왔어야 했음 그거 말고 계산자체는 맞았음
2. 막대넓이도 페이지 수에 따라 계산하도록 완료.
3. lucy-xss-filter를 사용하면 게시글을 작성할 시 <script>같은 이런 제목들도 다 막아줄 수 있음.(다음강의에서 자세히)

==================================================================================
23강 스크립트 코드 방어해보기

1. dto 가서 해당되는 변수에 (제목이면 title, 내용이면 content등등) get변수를 만들고
return content.replaceAll("<", "&lt;").replaceAll(">", "&gt;"); 를 등록

==================================================================================
24강 게시글 상세보기

1. Material css 홈페이지 가서 <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet"> 추가하고
2. 홈페이지에 나와있는 아이콘 맞춰서 <i onclick="#" class="material-icons">여기이름만바꿔주면 자동으로바뀜</i>
3. INNER JOIN 사용해봤다 한번 더 볼것
4. 

==================================================================================
26강 게시글 삭제

1. 요청 받은 json데이터를 자바 오브잭트로 패싱 (ajax에서 body데이터로 던지면 controller에서는 buffer로 읽어야 함.)
2. DB에서 id값으로 글 삭제 (int result = boardService.글삭제(dto.getBoardId());
3. 응답할 json 데이터 생성
-- 나중에 리플렉션 활용하면 더 쉽게 된다는데 무슨 말 일까...?

==================================================================================
27강 게시글 수정

1. 수정할 updateForm.jsp를 생성
2. 수정 버튼을 클릭 시 원래 정보를 받아와야 하니까 value속성을 이용해서 이전에 값을 미리 다 받아옴
3. 컨트롤러에서 updateForm과 update요청을 추가함
4. update시에는 사실 sessionScope.loginUser.id가 필요하지 않음 (로그인 한 유저가 아니면 수정 자체가 되지 않으니까!)
5. 그 게시글의 관련된 id와 title, content를 저장하는 UpdateReqDto를 추가 후 이전에 받아온 값을 setter로 저장
6. 그 뒤는 그냥 컨트롤러 서비스 dao가서 UPDATE문으로 변경하는 로직

==================================================================================
28강 공통Dto 만들기

1. Json이 어려워서 수정 할 껀데 이전의 코드는 지우지 않고 여기다 우선 넣어둠.
<script type="text/javascript">
		function deleteById(boardId) {
			// 요청과 응답을 json으로 통일
			var data = {
					boardId: boardId	// 앞에 있는 boardId는 변수 명 , 뒤에있는 boardId는 함수에 넘어온 매게변수
			}
			
			$.ajax({
				type: "POST",
				url: "/blog/board?cmd=delete",
				data: JSON.stringify(data),
				contentType: "application/json; charset=utf-8",
				dataType: "json"
			}).done(function(result){
				if (result.status == "ok") {
					location.href="index.jsp";
				} else {
					alert('삭제에 실패하였습니다.');
				}
			});
		}
	</script>

2. 변경코드는 이렇습니다.
	$.ajax({
				type: "POST",
				url: "/blog/board?cmd=delete&id="+boardId,
				dataType: "json"
			}).done(function(result){
				if (result.statusCode == "1") {
					location.href="index.jsp";
				} else {
					alert('삭제에 실패하였습니다.');
				}
			});
		}


3. CommonRespDto를 만들고 제네릭을 활용해서 만듭니다.
4. 사실 이 부분은 많이 어렵다...여러 번 확인해볼것


==================================================================================
29강 댓글쓰기 50%

1. 초반 세팅 (ReplyController 연결해줘야하고 SaveReqDto만들어서 필요한 정보 저장해주고)
2. 흐름 따라서 하면 되서 어려울 건 없음

해야 할 것 
- 세션 체크 (댓글)
- 상세보기 할 때 댓글들 다 같이 데리고 와야함
- 댓글 삭제


==================================================================================
30강 댓글쓰기 100% (ajax 활용해서..)

1. 우선 어렵다. 안배운 개념을 활용해서 하는데 그 개념을 우선 숙지가 안되어있어서 따라치기에 바빴음 ㅜ..
2. 댓글이 올라가는건 확인했는데 이쁘게 포장해서 하는 방법을 잘 모르겠고
3. 댓글쓰는 사람의 이름을 어떻게 불러와야 할지도 잘 모르겠다.
4 ㅜㅜ..






















